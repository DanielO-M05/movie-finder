import { useState, useEffect, useRef} from 'react';
import axios from 'axios';
import './App.css';

const MovieSearch = () => {
  const [movies, setMovies] = useState([]); // Holds list of movies returned
  const [results, setResults] = useState('');
  const [query, setQuery] = useState('');
  const [year, setYear] = useState('');
  const [page, setPage] = useState('1');
  const [error, setError] = useState('');

   // Effect to fetch movies whenever `page` changes
   useEffect(() => {
    if (movies.length > 0) {
      fetchMovies();
    }

  }, [page]); // Dependency array includes `page`

  const fetchMovies = async () => {
    try {

      let url = `http://www.omdbapi.com/?s=${query}&apikey=10b84ae6`;

      if (year.trim()) {
        url +=`&y=${year}`;
      }

      if (page.trim()) {
        //console.log(page);
        url += `&page=${page}`;
      }

      console.log(url);

      const response = await axios.get(url);
      console.log(response); // For debugging
      if (response.data.Response === "True") {
        setMovies(response.data.Search); // Set the list of movies
        setResults(response.data.totalResults);
        setError('');
      } else {
        setError(response.data.Error);
        setResults(0);
        setMovies([]);
      }
    } catch (error) {
      console.error("Error fetching the movie data:", error);
      setError(error.message.concat(". I pinky promise it's not my fault."));
      setResults(0);
      setMovies([]);
    }
  };

  const handleSearch = (e) => {
    e.preventDefault();
    setPage('1'); // Reset to first page every search
    fetchMovies();
  };

  const handleMore = () => {
    setPage(`${parseInt(page, 10) + 1}`);
    //setPage(prevPage => `${parseInt(prevPage, 10) + 1}`);
    console.log(page);
    //fetchMovies();
  }

  return (
    <div>
      <h1> Movie Finder </h1>
      <form onSubmit={handleSearch}>
        <input 
          type="text" 
          value={query} 
          onChange={(e) => setQuery(e.target.value)} 
          placeholder="Search for a movie..."
        />
        
        <input 
          type="text" 
          value={year} 
          onChange={(e) => setYear(e.target.value)} 
          placeholder="Specify a year (optional)"
        /> 
        <button type="submit">Search</button>
      </form>
    <div>
  {movies && movies.length > 0 ? (
    <>
      <p> {results} results found </p>
      {movies.map((movie) => (
        <div key={movie.imdbID}>
          <h2>{movie.Title}</h2>
          <p>{movie.Year}</p>
          <img src={movie.Poster} alt={movie.Title} />
        </div>
      ))}
      {((results - (parseInt(page, 10)) * 10) > 0 && results > 10) && (
        <>
        {/*console.log(page)*/}
        <button onClick={handleMore}> Show next page </button>
        </>
      )}
    </>
  ) : (
    error ? ( // Shows error too fast
      <p>{error}</p>
    ) : (
      <p>No movies found.</p>
    )
  )}
</div>

    </div>
  );
};

export default MovieSearch;