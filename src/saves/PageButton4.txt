import { useState, useEffect, useRef} from 'react';
import axios from 'axios';
import './App.css';

const MovieSearch = () => {
  const [movies, setMovies] = useState([]); // Holds list of movies returned
  const [results, setResults] = useState('');
  const [query, setQuery] = useState('');
  const [year, setYear] = useState('');
  const [page, setPage] = useState('1');
  const [error, setError] = useState('');

  const fetchMovies = async (pageToFetch = '1') => {
    try {

      let url = `http://www.omdbapi.com/?s=${query}&apikey=10b84ae6`;

      if (year.trim()) {
        url +=`&y=${year}`;
      }

      if (pageToFetch.trim()) {
        url += `&page=${pageToFetch}`;
      }

      console.log(url);

      const response = await axios.get(url);
      console.log(response); // For debugging
      if (response.data.Response === "True") {
        setMovies(response.data.Search); // Set the list of movies
        setResults(response.data.totalResults);
        setError('');
      } else {
        setError(response.data.Error);
        setResults(0);
        setMovies([]);
      }
    } catch (error) {
      console.error("Error fetching the movie data:", error);
      setError(error.message.concat(". I pinky promise it's not my fault."));
      setResults(0);
      setMovies([]);
    }
  };

  const handleSearch = (e) => {
    e.preventDefault();
    setPage('1'); // Reset to first page every search
    fetchMovies();
  };

  const handleNext = () => {
    setPage(`${parseInt(page, 10) + 1}`);
    fetchMovies(`${parseInt(page, 10) + 1}`);
    jumpToTop();
  }

  const handlePrev = () => {
    setPage(`${parseInt(page, 10) - 1}`);
    fetchMovies(`${parseInt(page, 10) - 1}`);
    jumpToTop();
  }

  const handleFirstPage = () => {
    setPage("1");
    fetchMovies("1");
    jumpToTop();
  }

  const handleLastPage = () => {
    const lastPage = Math.ceil(parseInt(results, 10) / 10);
    setPage(lastPage.toString());
    fetchMovies(lastPage.toString());
    jumpToTop();
  }

  const jumpToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'auto'
    });
  };

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth' // This makes the scroll smooth
    });
  };

  return (
    <div>
      <h1> Movie Finder </h1>
      <form onSubmit={handleSearch}>
        <input 
          type="text" 
          value={query} 
          onChange={(e) => setQuery(e.target.value)} 
          placeholder="Search for a movie..."
        />
        
        <input 
          type="text" 
          value={year} 
          onChange={(e) => setYear(e.target.value)} 
          placeholder="Specify a year (optional)"
        /> 
        <button type="submit">Search</button>
      </form>
    <div>
  {movies && movies.length > 0 ? (
    <>
      <p> {results} results found </p>
      <p> Page {page} </p>

      {/* Buttons go here */}
      {movies.map((movie) => (
        <div key={movie.imdbID}>
          <h2>{movie.Title}</h2>
          <p>{movie.Year}</p>
          {(movie.Poster==="N/A") ? 
            <p> No Image Available </p> :
            <img src={movie.Poster} alt={movie.Title} /> 
          }
          
        </div>
      ))}

      {(parseInt(page, 10) > 1 && results > 10) && (
        <button onClick={handleFirstPage}> Jump to first page </button>
      )}

      {((results - (parseInt(page, 10)) * 10) > 0 && results > 10) && (
        <button onClick={handleNext}> Load next page </button>
      )}

      {(parseInt(page, 10) > 1 && results > 10) && (
        <button onClick={handlePrev}> Load previous page </button>
      )}

      {(parseInt(page, 10) < Math.ceil(parseInt(results, 10) / 10) && results > 10) && (
        <button onClick={handleLastPage}> Jump to last page </button>
      )}

      <button onClick={scrollToTop}> Go to Top </button>

    </>
  ) : (
    error ? (
      <p>{error}</p>
    ) : (
      <p>No movies found.</p>
    )
  )}
</div>

    </div>
  );
};

const PageButtons = ({ onClick, text, condition }) => {
  if (!condition) return null;

  return (<button onClick={onClick}>{text}</button>)
}

export default MovieSearch;