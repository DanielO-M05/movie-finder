import { useState, useEffect, useRef} from 'react';
import axios from 'axios';
import './App.css';

const MovieSearch = () => {
  const [movies, setMovies] = useState([]); // Holds list of movies returned
  const [results, setResults] = useState('');
  const [query, setQuery] = useState('');
  const [year, setYear] = useState('');
  const [page, setPage] = useState('1');
  const [error, setError] = useState('');

  const fetchMovies = async (pageToFetch = '1') => {
    try {

      let url = `http://www.omdbapi.com/?s=${query}&apikey=10b84ae6`;

      if (year.trim()) {
        url +=`&y=${year}`;
      }

      if (pageToFetch.trim()) {
        url += `&page=${pageToFetch}`;
      }

      console.log(url);

      const response = await axios.get(url);
      console.log(response); // For debugging
      if (response.data.Response === "True") {
        setMovies(response.data.Search); // Set the list of movies
        setResults(response.data.totalResults);
        setError('');
      } else {
        setError(response.data.Error);
        setResults(0);
        setMovies([]);
      }
    } catch (error) {
      console.error("Error fetching the movie data:", error);
      setError(error.message.concat(". I pinky promise it's not my fault."));
      setResults(0);
      setMovies([]);
    }
  };

  const handleSearch = (e) => {
    e.preventDefault();
    setPage('1'); // Reset to first page every search
    fetchMovies();
  };

  const handleNext = () => {
    setPage(`${parseInt(page, 10) + 1}`);
    fetchMovies(`${parseInt(page, 10) + 1}`);
    jumpToTop();
  }

  const handlePrev = () => {
    setPage(`${parseInt(page, 10) - 1}`);
    fetchMovies(`${parseInt(page, 10) - 1}`);
    jumpToTop();
  }

  const handleFirstPage = () => {
    setPage("1");
    fetchMovies("1");
    jumpToTop();
  }

  const handleLastPage = () => {
    const lastPage = Math.ceil(parseInt(results, 10) / 10);
    setPage(lastPage.toString());
    fetchMovies(lastPage.toString());
    jumpToTop();
  }

  const jumpToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'auto'
    });
  };

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth' // This makes the scroll smooth
    });
  };

  return (
    <div>
      <h1> Movie Finder </h1>
      <form onSubmit={handleSearch}>
        <input 
          type="text" 
          value={query} 
          onChange={(e) => setQuery(e.target.value)} 
          placeholder="Search for a movie..."
        />
        
        <input 
          type="text" 
          value={year} 
          onChange={(e) => setYear(e.target.value)} 
          placeholder="Specify a year (optional)"
        /> 
        <button type="submit">Search</button>
      </form>

      <div>
        {movies && movies.length > 0 ? (
        <>
          <p> {results} results found </p>
          <p> Page {page} </p>

          <PageButtonPanel
                  handleFirstPage={handleFirstPage}
                  handleNext={handleNext}
                  handlePrev={handlePrev}
                  handleLastPage={handleLastPage}
                  page={page}
                  results={results}
          />

          <br></br>

          <div className="movies-container">
            {movies.map((movie) => (
              <div className="movie-card" key={movie.imdbID}>
                <div className="movie-info">
                  <h2 className="movie-title">{movie.Title}</h2>
                  <h2 className="movie-year">{movie.Year}</h2>
                </div>
                {movie.Poster === "N/A" ? (
                  <p className="no-image">No Image Available</p>
                ) : (
                  <img className="movie-poster" src={movie.Poster} alt={movie.Title} />
                )}
              </div>
            ))}
          </div>


          <PageButtonPanel
                  handleFirstPage={handleFirstPage}
                  handleNext={handleNext}
                  handlePrev={handlePrev}
                  handleLastPage={handleLastPage}
                  page={page}
                  results={results}
          />

          <br></br>
          <button onClick={scrollToTop}> Go to Top </button>

        </>
        ) : (
          error ? (
            <p>{error}</p>
          ) : (
            <p>No movies found.</p>
          )
        )}
      </div>

    </div>
  );
};

const PageButton = ({ onClick, text, condition }) => {
  if (!condition) return null;

  return (<button onClick={onClick}>{text}</button>)
}

const PageButtonPanel = ({ handleFirstPage, handleNext, handlePrev, handleLastPage, page, results }) => {
  const showFirstPageButton = parseInt(page, 10) > 1 && results > 10;
  const showNextPageButton = ((results - (parseInt(page, 10)) * 10) > 0 && results > 10);
  const showPrevPageButton = parseInt(page, 10) > 1 && results > 10;
  const showLastPageButton = parseInt(page, 10) < Math.ceil(parseInt(results, 10) / 10) && results > 10;

  return (
  <>
    <div>

      {/* These kind of buttons to look nicer */}
      {/* <button>
        <img src="src\assets\arrow.png"
          width="30"
          height="20"
        />
      </button> */} 

      <PageButton
        onClick={handlePrev}
        text="Load previous page"
        condition={showPrevPageButton}
      />

      <PageButton
        onClick={handleNext}
        text="Load next page"
        condition={showNextPageButton}
      />

    </div>

    <div>
      <PageButton 
        onClick={handleFirstPage}
        text="Jump to first page"
        condition={showFirstPageButton}
      />

      <PageButton
        onClick={handleLastPage}
        text="Jump to last page"
        condition={showLastPageButton}
      />
    </div>
  </>
  )
}

export default MovieSearch;

{/* CSS Below */}

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.image-txt-container {
  display: flex;
  align-items: flex-start;
  /* flex-direction: row; */
}

.movies-container {
  display: flex;
  flex-direction: column;
  gap: 20px;
  padding: 20px;
}

.movie-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  border: 1px solid #ddd;
  padding: 15px;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.movie-info {
  text-align: center;
  margin-bottom: 10px;
}

.movie-title {
  font-size: 1.5em;
  margin-bottom: 5px;
}

.movie-year {
  font-size: 1.2em;
  color: #888;
  margin-top: -15px;
}

.no-image {
  font-size: 1em;
  color: #c00;
  text-align: center;
}

.movie-poster {
  width: 400px;
  height: auto;
  border-radius: 5px;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
